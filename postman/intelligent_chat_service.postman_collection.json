{
  "info": {
    "name": "Intelligent Chat Service API",
    "description": "A collection for testing the Intelligent Chat Service API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "item": [
    {
      "name": "Health Check & Base",
      "item": [
        {
          "name": "Root",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            },
            "description": "Get welcome message"
          },
          "response": []
        },
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if service is healthy"
          },
          "response": []
        }
      ],
      "description": "Basic health check endpoints"
    },
    {
      "name": "Chat",
      "item": [
        {
          "name": "Execute Chat Workflow",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "chat"]
            },
            "description": "Start a chat conversation with the AI",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"workflow_name\": \"idiscovery_orchestrator\",\n  \"user_input\": \"What is an agentic AI framework?\",\n  \"selected_sources\": [],\n  \"config\": {\n    \"thread_id\": \"thread-{{$randomUUID}}\",\n    \"client_id\": \"postman-client\",\n    \"user_id\": \"postman-user\",\n    \"session_id\": \"session-{{$randomUUID}}\",\n    \"human_in_the_loop\": true\n  },\n  \"stream\": true\n}"
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Human Interaction",
      "item": [
        {
          "name": "Get Pending Interactions",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/ai/human/pending",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "pending"]
            },
            "description": "Get all pending interactions waiting for human input"
          },
          "response": []
        },
        {
          "name": "Submit Human Response",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/human/response",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "response"]
            },
            "description": "Submit a human response to an AI question",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"interaction_id\": \"{{interactionId}}\",\n  \"response\": \"This is my human response to the AI's question\",\n  \"metadata\": {\n    \"session_id\": \"session-test\",\n    \"thread_id\": \"thread-test\",\n    \"source\": \"postman\"\n  }\n}"
            }
          },
          "response": []
        },
        {
          "name": "Cleanup Interactions",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/human/cleanup",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "cleanup"]
            },
            "description": "Manually trigger cleanup of completed interactions"
          },
          "response": []
        },
        {
          "name": "Get Thread Interactions",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/ai/human/thread/{{threadId}}",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "thread", "{{threadId}}"]
            },
            "description": "Get all interactions for a particular thread"
          },
          "response": []
        },
        {
          "name": "Get Session Interactions",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/ai/human/session/{{sessionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "session", "{{sessionId}}"]
            },
            "description": "Get all interactions for a particular session"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tools",
      "item": [
        {
          "name": "Create Tool",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/tools/",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "tools", ""]
            },
            "description": "Create a new tool with vector embeddings for semantic search",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Weather API\",\n  \"description\": \"Retrieves current weather information for a specified location\",\n  \"parameters\": [\n    {\n      \"name\": \"location\",\n      \"type\": \"string\",\n      \"description\": \"City name or coordinates\",\n      \"required\": true\n    },\n    {\n      \"name\": \"units\",\n      \"type\": \"string\",\n      \"description\": \"Temperature units (metric, imperial)\",\n      \"required\": false,\n      \"default\": \"metric\"\n    }\n  ],\n  \"endpoint\": \"https://api.example.com/weather\",\n  \"category\": \"external_api\",\n  \"tags\": [\"weather\", \"forecast\", \"api\"],\n  \"version\": \"1.0.0\",\n  \"enabled\": true\n}"
            }
          },
          "response": []
        },
        {
          "name": "Get Tool by ID",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/ai/tools/tool/{{toolId}}",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "tools", "tool", "{{toolId}}"]
            },
            "description": "Get a tool by its ID"
          },
          "response": []
        },
        {
          "name": "List Tools",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/ai/tools/list?category=external_api&tag=weather&enabled=true&skip=0&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "tools", "list"],
              "query": [
                {
                  "key": "category",
                  "value": "external_api",
                  "description": "Optional filter by category"
                },
                {
                  "key": "tag",
                  "value": "weather",
                  "description": "Optional filter by tag"
                },
                {
                  "key": "enabled",
                  "value": "true",
                  "description": "Optional filter by enabled status"
                },
                {
                  "key": "skip",
                  "value": "0"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "List all tools with optional filtering"
          },
          "response": []
        },
        {
          "name": "Update Tool",
          "request": {
            "method": "PUT",
            "url": {
              "raw": "{{baseUrl}}/ai/tools/tool/{{toolId}}",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "tools", "tool", "{{toolId}}"]
            },
            "description": "Update an existing tool",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Updated description for the weather API tool\",\n  \"tags\": [\"weather\", \"forecast\", \"api\", \"updated\"],\n  \"enabled\": true,\n  \"version\": \"1.0.1\"\n}"
            }
          },
          "response": []
        },
        {
          "name": "Delete Tool",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/ai/tools/tool/{{toolId}}",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "tools", "tool", "{{toolId}}"]
            },
            "description": "Delete a tool by its ID"
          },
          "response": []
        },
        {
          "name": "Search Tools",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/tools/search?query=weather forecast&category=external_api&enabled=true&limit=5&rerank=true",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "tools", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "weather forecast",
                  "description": "Search query for finding tools"
                },
                {
                  "key": "category",
                  "value": "external_api",
                  "description": "Optional category filter"
                },
                {
                  "key": "enabled",
                  "value": "true",
                  "description": "Optional filter for enabled tools"
                },
                {
                  "key": "limit",
                  "value": "5",
                  "description": "Maximum number of results to return"
                },
                {
                  "key": "rerank",
                  "value": "true",
                  "description": "Whether to use cross-encoder for reranking"
                }
              ]
            },
            "description": "Search for tools using semantic search with optional reranking"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Graph Orchestrator",
      "item": [
        {
          "name": "Execute Graph Workflow",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "chat"]
            },
            "description": "Execute a chat with the graph-based orchestrator",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"workflow_name\": \"graph_basic_orchestrator\",\n  \"user_input\": \"What is an agentic AI framework?\",\n  \"selected_sources\": [],\n  \"config\": {\n    \"thread_id\": \"graph-thread-{{$randomUUID}}\",\n    \"client_id\": \"postman-client\",\n    \"user_id\": \"postman-user\",\n    \"session_id\": \"session-{{$randomUUID}}\",\n    \"human_in_the_loop\": true\n  },\n  \"stream\": true\n}"
            }
          },
          "response": []
        },
        {
          "name": "Register Graph",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/graph/register",
              "host": ["{{baseUrl}}"],
              "path": ["graph", "register"]
            },
            "description": "Register a new graph orchestrator definition",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Custom Graph\",\n  \"description\": \"A custom graph-based workflow\",\n  \"nodes\": [\n    {\n      \"id\": \"analyzer\",\n      \"name\": \"Analyzer Node\",\n      \"dependencies\": [],\n      \"metadata\": {\n        \"description\": \"Analyzes the user input\"\n      }\n    },\n    {\n      \"id\": \"planner\",\n      \"name\": \"Planner Node\",\n      \"dependencies\": [\"analyzer\"],\n      \"metadata\": {\n        \"description\": \"Plans the response based on analysis\"\n      }\n    },\n    {\n      \"id\": \"generator\",\n      \"name\": \"Generator Node\",\n      \"dependencies\": [\"planner\"],\n      \"metadata\": {\n        \"description\": \"Generates the final response\"\n      }\n    }\n  ]\n}"
            }
          },
          "response": []
        },
        {
          "name": "List Graphs",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/graph/list",
              "host": ["{{baseUrl}}"],
              "path": ["graph", "list"]
            },
            "description": "List all registered graph orchestrator definitions"
          },
          "response": []
        },
        {
          "name": "Get Graph Details",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/graph/{{graphId}}",
              "host": ["{{baseUrl}}"],
              "path": ["graph", "{{graphId}}"]
            },
            "description": "Get details about a specific graph orchestrator"
          },
          "response": []
        },
        {
          "name": "Visualize Graph (JSON)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/graph/{{graphId}}/visualize?format=json",
              "host": ["{{baseUrl}}"],
              "path": ["graph", "{{graphId}}", "visualize"],
              "query": [
                {
                  "key": "format",
                  "value": "json"
                }
              ]
            },
            "description": "Visualize a graph in JSON format"
          },
          "response": []
        },
        {
          "name": "Visualize Graph (DOT)",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/graph/{{graphId}}/visualize?format=dot",
              "host": ["{{baseUrl}}"],
              "path": ["graph", "{{graphId}}", "visualize"],
              "query": [
                {
                  "key": "format",
                  "value": "dot"
                }
              ]
            },
            "description": "Visualize a graph in DOT format for Graphviz rendering"
          },
          "response": []
        },
        {
          "name": "Delete Graph",
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/graph/{{graphId}}",
              "host": ["{{baseUrl}}"],
              "path": ["graph", "{{graphId}}"]
            },
            "description": "Delete a registered graph orchestrator"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Human Interaction Tests",
      "item": [
        {
          "name": "Step-based Workflow with Human Interaction",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "chat"]
            },
            "description": "Test a standard workflow that triggers human-in-the-loop",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"workflow_name\": \"idiscovery_orchestrator\",\n  \"user_input\": \"This is an ethical question that might require human judgment: What ethical principles should guide AI development?\",\n  \"selected_sources\": [],\n  \"config\": {\n    \"thread_id\": \"human-test-{{$randomUUID}}\",\n    \"client_id\": \"postman-client\",\n    \"user_id\": \"postman-user\",\n    \"session_id\": \"session-{{$randomUUID}}\",\n    \"human_in_the_loop\": true\n  },\n  \"stream\": true\n}"
            }
          },
          "response": []
        },
        {
          "name": "Graph-based Workflow with Human Interaction",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/chat",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "chat"]
            },
            "description": "Test a graph-based workflow that triggers human-in-the-loop",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"workflow_name\": \"graph_basic_orchestrator\",\n  \"user_input\": \"This is an ethical question that might require human judgment: What ethical principles should guide AI development?\",\n  \"selected_sources\": [],\n  \"config\": {\n    \"thread_id\": \"graph-human-test-{{$randomUUID}}\",\n    \"client_id\": \"postman-client\",\n    \"user_id\": \"postman-user\",\n    \"session_id\": \"session-{{$randomUUID}}\",\n    \"human_in_the_loop\": true\n  },\n  \"stream\": true\n}"
            }
          },
          "response": []
        },
        {
          "name": "Check Pending Human Interactions",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/ai/human/pending",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "pending"]
            },
            "description": "Check for any pending human interactions after running workflows"
          },
          "response": []
        },
        {
          "name": "Submit Human Response (Step-based)",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/human/response",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "response"]
            },
            "description": "Submit a human response for step-based workflow",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"interaction_id\": \"{{interactionId}}\",\n  \"response\": \"For AI development, key ethical principles should include transparency, fairness, accountability, safety, and respecting human autonomy. These principles ensure AI systems are developed responsibly.\",\n  \"metadata\": {\n    \"source\": \"postman_test\",\n    \"workflow_type\": \"step_based\"\n  }\n}"
            }
          },
          "response": []
        },
        {
          "name": "Submit Human Response (Graph-based)",
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/ai/human/response",
              "host": ["{{baseUrl}}"],
              "path": ["ai", "human", "response"]
            },
            "description": "Submit a human response for graph-based workflow",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"interaction_id\": \"{{graphInteractionId}}\",\n  \"response\": \"AI development should be guided by principles of transparency, fairness, accountability, privacy protection, and human oversight to ensure responsible innovation.\",\n  \"metadata\": {\n    \"source\": \"postman_test\",\n    \"workflow_type\": \"graph_based\"\n  }\n}"
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "toolId",
      "value": "",
      "type": "string",
      "description": "ID of a tool for testing"
    },
    {
      "key": "interactionId",
      "value": "",
      "type": "string",
      "description": "ID of an interaction for step-based workflow testing"
    },
    {
      "key": "graphInteractionId",
      "value": "",
      "type": "string",
      "description": "ID of an interaction for graph-based workflow testing"
    },
    {
      "key": "sessionId",
      "value": "",
      "type": "string",
      "description": "Session ID for testing"
    },
    {
      "key": "threadId",
      "value": "",
      "type": "string",
      "description": "Thread ID for testing"
    },
    {
      "key": "graphId",
      "value": "",
      "type": "string",
      "description": "ID of a graph orchestrator for testing"
    }
  ]
}
